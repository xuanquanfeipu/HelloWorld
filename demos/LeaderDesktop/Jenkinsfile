#!/usr/bin/groovy
/*********************************************************************************************************
 * 文件描述
 * 测试项目定义文件
 *
 * 修改日期      版本号            修改人      修改内容
 * -----------------------------------------------------------------------
 * 2018-05-07    V1.0              10018491    create
 ********************************************************************************************************/
@Library('plll@zhengtong/master') _

/*********************************************************************************************************
 * 主流程
 ********************************************************************************************************/
main()

/* main */
def main() {
     pnode("goldendata || mesos") {
        /* 初始化环境 --不用修改 */
        set_system_properties()
        
        /* 设置启动properties --不用修改 */
        set_default_properties()
        
        /* 某step运行告警或error时，增加控制台输出日志 --不用修改 */
        //plll.setDebug()

        /* pipe执行过程 */
        plll([
            worksapce:"${env.SHARED}", 
            sharenumber: getShareNumber(),   /* 获取并行数 --不用修改 */            
            artifactory: "NJArtifactory",      /* Jenkins服务系统配置:制品库--不用修改 */
        ]) {
            /* 设置运行参数 --不用修改*/
            set_running_properties()  

			/* 执行业务pipeline流程 --不用修改*/
			run_pipeline();
        }
    }
    
    return
}

/*********************************************************************************************************
 * 设置参数
 ********************************************************************************************************/
/* 设置系统参数 */
def set_system_properties() {
    /* for admin */
    env.ADMIN_USER_EMAIL   = "sun.fangkuan@zte.com.cn" /* jenkinsfile管理员 --修改 */
    env.mail_cc = "00140146,00137822,10144142,10137648,10138051,10073014,00137653,00206734,10137652,6005001629"  /* 邮件通知列表 */
    env.ProductModel ="ZXCLOUD GoldenData UOC"  /* 定义所属产品型号规格 --修改 */    
    env.GERRIT_KEY_ID      = "85d7df7b-b642-4908-8731-33061cb92a33"  /* jenkins上相关库的git认证账号的ID，联系配置管理员获取 --不用修改 */    
    env.GERRIT_SERVER_NAME = "goldendata-gerrit"  /* Jenkins服务gerrit trigger配置，联系配置管理员获取 --不用修改 */
    env.GERRIT_SERVER_URL  = plll.getScmServer() /* gerrit服务器获取 --不用修改 */
    env.GERRIT_PROJECT     = env.GERRIT_PROJECT?:plll.getScmProject() /* 获取库名称 --不用修改 */
    env.BRANCH_TAG         = env.BRANCH_TAG?:plll.getJobBaseName() /* 获取git库分支名称 --不用修改 */    
    env.ART_TARGET         = "uoc-snapshot-generic/${plll.getJobName()}" /* 定义制品库路径，联系配置管理员--修改 */
		env.language           ="JAVA"
    plll.setArtifactory(["target":env.ART_TARGET]) /* 设置制品库属性--不用修改 */
    
    env.PROJECT_NAME="${plll.getJobName()}".replaceFirst(/\/.*/,"")  /*从JOB NAME获取构建的工程名*/
    env.PROJECT_VERSION="V1.01.03"   /*修改成当前构建的版本号*/
    echo "<---------- system_properties ------------->"
    echo "---------- GERRIT_SERVER_URL -------------${env.GERRIT_SERVER_URL}"
    echo "---------- GERRIT_PROJECT -------------${env.GERRIT_PROJECT}"
    echo "---------- BRANCH_TAG -------------${env.BRANCH_TAG}"
    echo "---------- ART_TARGET -------------${env.ART_TARGET}"
    echo "---------- PROJECT_NAME -------------${env.PROJECT_NAME}"
    echo "---------- PROJECT_VERSION -------------${env.PROJECT_VERSION}"
    return
}

/* 设置JOB属性参数 */
def set_default_properties() {
    /* 定义gerrit触发事件--不用修改*/
	def gerrit = [
			server:"${env.GERRIT_SERVER_NAME}",
			projects:[[project:"${env.GERRIT_PROJECT}", branch:"${plll.getJobBaseName()}"]],
            events: [patchsetcreated: [excludeDrafts: false, excludeNoCodeChange: true, excludeTrivialRebase: false],changemerged: true, draftpublished: true, changerestored: true, codereview: true]
		]        
      
    def cron = null
    /* 增加定义job参数，需要增加时，联系配置管理员--不用修改 */
    def parameters = [
			/*
			string(defaultValue: '', description: '',name: ''), 
			choice(choices: 'a\nb\nc', description: '', name: ''),
			*/
			string(defaultValue: "${plll.getJobBaseName()}", description: '触发分支',name: 'BRANCH_TAG'),
		]
	
    /* 根据分支定制参数日构建策略--可修改*/
    if(plll.checkBranchName('master')) {
        cron = 'H(0-15) 13 * * *'
    } 

    plll.set_default_properties([
        /* 关联gerrit --不用修改*/
        gerrit: gerrit,
        /* 定时任务 --不用修改*/
        cron: cron,
        /* 自定义参数 --不用修改*/
        parameters: parameters, 
    ]);

    return 
}

/* 设置运行参数 --不用修改 */
def set_running_properties() {
    plll.setBranchTag(env.BRANCH_TAG)
	//plll.setMeasure("root/root_123456@10.40.65.27:3306/PLLL")
    return
}

/*********************************************************************************************************
 * 业务流程
 ********************************************************************************************************/
def run_pipeline() {
    /* 根据项目实际情况定义JOB运行各step和运行内容--修改*/
    stage('Update') { run_update() }  /*更新代码--不用修改*/
	

    parallel ('Check':{   /*并发运行设置，根据实际情况定义，且并发一定要放到括号中--修改*/
        stage('Check') { run_check() }
    }, 'Build':{
        stage('Build') { run_build() }
    }) 
    
    
    //stage('cic') { run_cic() } /*采集脚本运行，不使用政通框架下的默认采集方案时，定义*/
}

/* 更新 */
def run_update() {    
    echo "---------- start update -------------"
    /*多库update时，参考下面过程添加；代码默认下载到工作区source目录，同时注意report meausure可以不定义；--可不用修改*/
    plll.Update('update', '更新代码', [
        scm:[type:"git", keyid:"${env.GERRIT_KEY_ID}",  repo:"${env.GERRIT_SERVER_URL}", project:"${env.GERRIT_PROJECT}", 
			 branch:"${env.BRANCH_TAG}", path:"${env.SHARESPACE}/source",refspec:""],
		report:[[report_dir:"${->env.OUTPUT_PATH}", report_file:"commit_files.txt",report_name:"变更文件", report_always: true],[report_dir:"${->env.OUTPUT_PATH}", report_file:"change_log.txt",report_name:"提交日志", report_always: true]],
		measure:[update:false],
    ])
    echo "---------- SHARESPACE -------------${env.SHARESPACE}"
    echo "---------- update end -------------"
 
}

/* 检查 */
def run_check(){
    
    parallel 'lizard_check':{
        pnode {
            echo "---------- start lizard_check -------------"
            /*如有定义lizard检查需求时可用下面方案；用户按实际情况调整检查参数，注意代码在工作区source目录，报告在target目录--可修改*/
            plll.Complexity('complexity', '检查圈复杂度', [
                run_dir:"${env.SHARESPACE}",
                run_execute:{ 	
                        def lizard_execute  = "python /opt/lizard/lizard.py  java 10 . >/home/version/target/cyclomatic_complexity.txt"
                        pdocker (
								 /*检查镜像*/    "${env.PLLL_DOCKERHUB}/cloud-zxaisp/centos7:lizard1.2", 
								 /*检查执行命令*/ "cd /home/version/source && chmod +x *.sh && sh lizard.sh && ls -l /home/version/target || true",
								 /*检查映射目录*/ "-v ${env.SHARESPACE}:/home/version", 
								 "--privileged",
								)
							},
                /* 必须定义,report_dir 为报告父目录，report_file报告文件名称--可不修改*/
                report:[[report_name:'圈复杂度', report_dir:"${env.SHARESPACE}/target", report_file:"cyclomatic_complexity.txt", report_always:true]],
				/* 无项目采集数据库时，该项设置为false或注释--可不修改*/
                measure:[complexity: false],
            ]);
            echo "---------- end lizard_check -------------"
        }
    }, 'klocwork_check_java':{  /* 通过内置命令调用kw */
        pnode {
            plll.Klocwork('klocwork_check_java', 'java检查klocwork', [
                project:"${env.PROJECT_NAME}",
                keep_output:true,
                run_dir:"${env.SHARESPACE}",
                run_execute:{ 
	                pdocker (
									 /*检查镜像*/    "uoc-release-docker.artnj.zte.com.cn/suse11:kw-server", 
									 /*检查执行命令*/ "cd /home/version/source && source /etc/profile && chmod +x *.sh && sh kwjava.sh && ls -l /home/version/target || true",
									 /*检查映射目录*/ "-v ${env.SHARESPACE}:/home/version", 
									 "--privileged",
									)
                },
                report:[[report_name:'KW代码扫描', report_dir:"${env.SHARESPACE}/target/Klocwork/klocwork_check_java/kwcheck", report_file:"kw_check_report.txt", report_always:true],[report_name:'KW详细扫描', report_dir:"${env.SHARESPACE}/target/Klocwork/klocwork_check_java/kwcheck", report_file:"kw_result.json", report_always:true]],
                measure:[klocwork: false],
                kwurl:"http://10.40.66.138:8080/GoldenData-UOC-ZAGWV1.01.x"
            ]);
        }
    }
    return
}

/* 编译 */
def run_build(){
        pnode {
             echo "---------- start build -------------"
            plll.Build("debug_build", "编译调试版本", [
                with_env:["BUILD_TYPE=debug", "PLAT_TYPE=linux"],
                run_execute:{ 	pdocker (
								/* image      */ "uoc-release-docker.artnj.zte.com.cn/suse12:latest", 
								/* cmd 		  */ "source /etc/profile;cd /home/version/source/source;pwd;ls;chmod +x build.sh; ./build.sh ${env.PROJECT_NAME} ${env.PROJECT_VERSION}",
								/* volumes    */ "-v ${env.SHARESPACE}:/home/version", 
								/* params     */ "--privileged",
								)
							},
                /* 设置项目上载制品库位置，定义为数组型，last.txt要上载两个地方--必须修改*/
                artifactory: [[art_name:"静态库", art_dir:"${env.SHARESPACE}/source/source/output/", art_file:"*.zip", art_target:"${env.ART_TARGET}/${env.BUILD_ID}"],[art_name:"静态库", art_dir:"${env.SHARESPACE}/target/", art_file:"last.txt", art_target:"${env.ART_TARGET}/${env.BUILD_ID}"],[art_name:"静态库", art_dir:"${env.SHARESPACE}/target/", art_file:"last.txt", art_target:"${env.ART_TARGET}"]],
            ]); 
             echo "---------- end build -------------"
    }
   
   
    return
}

def run_cic(){
     /*度量采集测试 非必须可以删除    */
   plll.writeToCiCData()
   plll_zt.ccc()
   
   if (1==2){
   pnode {
            echo "---------- start ccc -------------"
            plll.Build("ccc", "度量采集测试", [
                with_env:["BUILD_TYPE=debug", "PLAT_TYPE=linux"],
                run_execute:{ 	pdocker (
								/* image      */ "${env.PLLL_DOCKERHUB}/cloud-zxaisp/centos7:cccipipev1", 
								/* cmd 		  */ "python /opt/ccciall-pipe.pyo -i /home/version/cifile.json",
								/* volumes    */ "-v ${env.SHARESPACE}/target:/home/version", 
								/* params     */ "--privileged",
								)
							},
                
            ]); 
             echo "---------- end ccc -------------"
    }
    }
    return
    
}

/*********************************************************************************************************
 * 工具函数
 ********************************************************************************************************/
/**
 *  获取并行数
 * 1、非mesos节点，master不限制（由节点的executor个数决定）
 * 2、mesos节点，master最多10个，非master最多2个
 */
def getShareNumber() {
    def sharenumber=0
    /*按需定义job运行时的工作区数量*/

    if(plll.isMesos()) {
        sharenumber = 2
    }

    if(!plll.checkBranchName('master')){
        sharenumber = 2
    }

    return sharenumber
}
